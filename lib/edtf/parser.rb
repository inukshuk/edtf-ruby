#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'strscan'

module EDTF
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 445)

  @defaults = {
    :level => 2,
    :debug => false
  }.freeze

  class << self; attr_reader :defaults; end

  attr_reader :options

  def initialize(options = {})
    @options = Parser.defaults.merge(options)
  end

  def debug?
    !!(options[:debug] || ENV['DEBUG'])
  end

  def parse(input)
    parse!(input)
  rescue => e
    warn e.message if debug?
    nil
  end

  def parse!(input)
    @yydebug = debug?
    @src = StringScanner.new(input)
    do_parse
  end

  def on_error(tid, value, stack)
    raise ArgumentError,
      "failed to parse date: unexpected '#{value}' at #{stack.inspect}"
  end

  def apply_uncertainty(date, uncertainty, scope = nil)
    uncertainty.each do |u|
      scope.nil? ? date.send(u) : date.send(u, scope)
    end
    date
  end

  alias uoa apply_uncertainty

  def next_token
    case
    when @src.eos?
      nil
    # when @src.scan(/\s+/)
      # ignore whitespace
    when @src.scan(/\(/)
      ['(', @src.matched]
    # when @src.scan(/\)\?~-/)
    #   [:PUA, [:uncertain!, :approximate!]]
    # when @src.scan(/\)\?-/)
    #   [:PUA, [:uncertain!]]
    # when @src.scan(/\)~-/)
    #   [:PUA, [:approximate!]]
    when @src.scan(/\)/)
      [')', @src.matched]
    when @src.scan(/\[/)
      ['[', @src.matched]
    when @src.scan(/\]/)
      [']', @src.matched]
    when @src.scan(/\{/)
      ['{', @src.matched]
    when @src.scan(/\}/)
      ['}', @src.matched]
    when @src.scan(/T/)
      [:T, @src.matched]
    when @src.scan(/Z/)
      [:Z, @src.matched]
    when @src.scan(/\?~/)
      [:UA, [:uncertain!, :approximate!]]
    when @src.scan(/\?/)
      [:UA, [:uncertain!]]
    when @src.scan(/~/)
      [:UA, [:approximate!]]
    when @src.scan(/open/i)
      [:OPEN, :open]
    when @src.scan(/unkn?own/i) # matches 'unkown' typo too
      [:UNKNOWN, :unknown]
    when @src.scan(/u/)
      [:U, @src.matched]
    when @src.scan(/x/i)
      [:X, @src.matched]
    when @src.scan(/y/)
      [:LONGYEAR, @src.matched]
    when @src.scan(/e/)
      [:E, @src.matched]
    when @src.scan(/\+/)
      ['+', @src.matched]
    when @src.scan(/-\(/)
      ['-(', @src.matched]
    when @src.scan(/-/)
      ['-', @src.matched]
    when @src.scan(/:/)
      [':', @src.matched]
    when @src.scan(/\//)
      ['/', @src.matched]
    when @src.scan(/\s*\.\.\s*/)
      [:DOTS, '..']
    when @src.scan(/\s*,\s*/)
      [',', ',']
    when @src.scan(/\^\w+/)
      ['^', @src.matched[1..-1]]
    when @src.scan(/\d/)
      [@src.matched, @src.matched.to_i]
    else @src.scan(/./)
      [:UNMATCHED, @src.rest]
    end
  end


# -*- racc -*-
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
   218,   217,    55,   209,   189,   210,   156,   135,   134,    60,
   219,    46,    48,    43,    58,    45,    57,    47,    46,    48,
    43,   -52,    45,    56,    47,   189,    61,    49,    50,    51,
    52,    53,   248,    59,    49,    50,    51,    52,    53,    20,
    28,    60,    29,   155,    58,   211,   154,    12,   265,    46,
    48,    43,   266,    45,    58,    47,   225,    36,    61,    37,
   134,    98,    39,    59,   267,    49,    50,    51,    52,    53,
    46,    48,    43,    59,    45,    58,    47,   166,    99,   100,
   202,   217,   199,   168,   270,   245,    49,    50,    51,    52,
    53,    46,    48,    43,    59,    45,   101,    47,   198,   200,
    61,   244,   246,   271,   201,    28,   148,    49,    50,    51,
    52,    53,    81,   174,    46,    48,    43,   107,    45,   109,
    47,   110,   191,   193,   175,   114,   190,    39,   192,   176,
    49,    50,    51,    52,    53,    92,   140,   117,    81,   118,
    46,    48,    43,   124,    45,   123,    47,   110,   117,   127,
   118,   213,   117,    39,   118,   189,    49,    50,    51,    52,
    53,    92,   213,   117,    81,   118,    46,    48,    43,   124,
    45,   123,    47,   110,   117,   127,   118,   274,   117,    39,
   118,   187,    49,    50,    51,    52,    53,    81,   186,    46,
    48,    43,   256,    45,   251,    47,    81,   177,    46,    48,
    43,   117,    45,   118,    47,    49,    50,    51,    52,    53,
   117,    39,   118,   234,    49,    50,    51,    52,    53,    81,
   235,    46,    48,    43,   124,    45,   123,    47,   110,   124,
   127,   123,   277,   110,    39,   127,   167,    49,    50,    51,
    52,    53,    75,   201,    46,    48,   278,   117,    45,   118,
    47,    81,   164,    46,    48,    43,   252,    45,   251,    47,
    49,    50,    51,    52,    53,   162,    39,   281,   282,    49,
    50,    51,    52,    53,    46,    48,    43,   161,    45,   160,
    47,    46,    48,    43,   197,    45,   195,    47,   196,   157,
    49,    50,    51,    52,    53,   287,   153,    49,    50,    51,
    52,    53,    46,    48,    43,   138,    45,   131,    47,    46,
    48,    43,   130,    45,   292,    47,   102,   296,    49,    50,
    51,    52,    53,   297,   298,    49,    50,    51,    52,    53,
    46,    48,    43,   299,    45,   -70,    47,    46,    48,   -69,
    73,    45,    72,    47,   304,   305,    49,    50,    51,    52,
    53,    71,   307,    49,    50,    51,    52,    53,    46,    48,
    43,   308,    45,   309,    47,    46,    48,    43,    70,    45,
   312,    47,   313,   189,    49,    50,    51,    52,    53,   315,
   316,    49,    50,    51,    52,    53,    46,    48,   293,   317,
    45,   318,    47,    46,    48,    43,   319,    45,   320,    47,
    69,   -54,    49,    50,    51,    52,    53,   323,   324,    49,
    50,    51,    52,    53,    46,    48,   288,   325,    45,   326,
    47,    46,    48,   286,    54,    45,   328,    47,   329,   330,
    49,    50,    51,    52,    53,   226,   331,    49,    50,    51,
    52,    53,    46,    48,    43,   234,    45,   235,    47,    46,
    48,   285,   224,    45,   223,    47,   222,   241,    49,    50,
    51,    52,    53,   220,   nil,    49,    50,    51,    52,    53,
   181,   203,   179,   nil,   180,   nil,   182,    46,    48,   nil,
   nil,    45,   nil,    47,   nil,   nil,   204,   205,   206,   207,
   208,   nil,   nil,    49,    50,    51,    52,    53,    46,    48,
   327,   nil,    45,   nil,    47,    46,    48,   nil,   nil,    45,
   nil,    47,   nil,   nil,    49,    50,    51,    52,    53,   nil,
   nil,    49,    50,    51,    52,    53,    46,    48,    43,   nil,
    45,   nil,    47,    46,    48,    43,   nil,    45,   nil,    47,
   nil,   nil,    49,    50,    51,    52,    53,   nil,   nil,    49,
    50,    51,    52,    53,    46,    48,   184,   nil,    45,   nil,
    47,    46,    48,    43,   nil,    45,   nil,    47,   nil,   nil,
    49,    50,    51,    52,    53,   nil,   nil,    49,    50,    51,
    52,    53,    46,    48,    43,   nil,    45,   nil,    47,    46,
    48,   nil,   nil,    45,   nil,    47,   nil,   nil,    49,    50,
    51,    52,    53,   nil,   nil,    49,    50,    51,    52,    53,
    46,    48,    43,   nil,    45,   nil,    47,    46,    48,    43,
   nil,    45,   nil,    47,   nil,   nil,    49,    50,    51,    52,
    53,   nil,   nil,    49,    50,    51,    52,    53,    46,    48,
    43,   nil,    45,   nil,    47,    46,    48,    43,   nil,    45,
   nil,    47,   nil,   nil,    49,    50,    51,    52,    53,   nil,
   nil,    49,    50,    51,    52,    53,    46,    48,    43,   nil,
    45,   nil,    47,    46,    48,    43,   nil,    45,   nil,    47,
   nil,   nil,    49,    50,    51,    52,    53,   nil,   nil,    49,
    50,    51,    52,    53,    46,    48,    43,   nil,    45,   nil,
    47,    46,    48,    43,   nil,    45,   nil,    47,   nil,   nil,
    49,    50,    51,    52,    53,   nil,   nil,    49,    50,    51,
    52,    53,    46,    48,   nil,   nil,    45,   nil,    47,    46,
    48,    43,   nil,    45,   nil,    47,   nil,   nil,    49,    50,
    51,    52,    53,   nil,   nil,    49,    50,    51,    52,    53,
    46,    48,    43,   nil,    45,   nil,    47,    46,    48,    43,
   nil,    45,   nil,    47,   nil,   nil,    49,    50,    51,    52,
    53,   273,   nil,    49,    50,    51,    52,    53,   124,   262,
   259,   124,   110,   123,   261,   110,   122,   127,   nil,   122,
   nil,   nil,   nil,   nil,   263,   nil,   124,   293,   123,   124,
   110,   123,   127,   110,   301,   127,   124,   124,   123,   123,
   110,   110,   127,   127,   124,   nil,   123,   nil,   110,   nil,
   127,   124,   262,   259,   nil,   110,   nil,   261,   124,   262,
   259,   nil,   110,   nil,   261,   nil,   nil,   263,   nil,   124,
   262,   123,   nil,   110,   263,   261,   124,   262,   322,   114,
   110,   nil,   261,   nil,   124,   263,   123,   nil,   110,   116,
   127,   117,   263,   118,   124,   nil,   123,   nil,   110,   nil,
   127,   197,   283,   195,   nil,   196,   nil,   284,   181,   178,
   179,   124,   180,   123,   182,   110,   124,   127,   123,   124,
   110,   123,   127,   110,   nil,   127 ]

racc_action_check = [
   133,   133,     5,   127,   169,   127,    79,    68,    68,    79,
   134,   133,   133,   133,     9,   133,     9,   133,    68,    68,
    68,     5,    68,     5,    68,   171,    79,   133,   133,   133,
   133,   133,   172,     9,    68,    68,    68,    68,    68,     0,
     0,    10,     0,    78,    78,   129,    78,     0,   178,     0,
     0,     0,   187,     0,   141,     0,   141,     0,    10,     0,
   132,    40,     0,    78,   198,     0,     0,     0,     0,     0,
   132,   132,   132,   141,   132,    95,   132,    95,    40,    41,
   122,   215,   119,    97,   211,   170,   132,   132,   132,   132,
   132,   215,   215,   215,    95,   215,    41,   215,   119,   119,
    97,   170,   170,   213,   121,    73,    73,   215,   215,   215,
   215,   215,    73,   104,    73,    73,    73,    55,    73,    55,
    73,    55,   116,   116,   104,   225,   116,    73,   116,   104,
    73,    73,    73,    73,    73,    37,    72,   225,    37,   225,
    37,    37,    37,   101,    37,   101,    37,   101,    72,   101,
    72,   130,    99,    37,    99,   115,    37,    37,    37,    37,
    37,    36,   154,   130,    36,   130,    36,    36,    36,   100,
    36,   100,    36,   100,   154,   100,   154,   224,    59,    36,
    59,   114,    36,    36,    36,    36,    36,    92,   113,    92,
    92,    92,   176,    92,   176,    92,   161,   105,   161,   161,
   161,   166,   161,   166,   161,    92,    92,    92,    92,    92,
   234,   161,   234,   230,   161,   161,   161,   161,   161,   162,
   232,   162,   162,   162,   235,   162,   235,   162,   235,   245,
   235,   245,   236,   245,   162,   245,    96,   162,   162,   162,
   162,   162,    29,   242,    29,    29,   244,    98,    29,    98,
    29,   277,    93,   277,   277,   277,   175,   277,   175,   277,
    29,    29,    29,    29,    29,    84,   277,   248,   250,   277,
   277,   277,   277,   277,   165,   165,   165,    83,   165,    82,
   165,   136,   136,   136,   118,   136,   118,   136,   118,    80,
   165,   165,   165,   165,   165,   257,    77,   136,   136,   136,
   136,   136,   263,   263,   263,    71,   263,    63,   263,   262,
   262,   262,    62,   262,   265,   262,    54,   268,   263,   263,
   263,   263,   263,   269,   271,   262,   262,   262,   262,   262,
    65,    65,    65,   273,    65,    27,    65,    69,    69,    26,
    25,    69,    21,    69,   279,   280,    65,    65,    65,    65,
    65,    20,   283,    69,    69,    69,    69,    69,   261,   261,
   261,   285,   261,   286,   261,    74,    74,    74,    19,    74,
   292,    74,   293,   295,   261,   261,   261,   261,   261,   296,
   297,    74,    74,    74,    74,    74,    75,    75,   298,   301,
    75,   304,    75,    76,    76,    76,   305,    76,   307,    76,
    18,    15,    75,    75,    75,    75,    75,   312,   316,    76,
    76,    76,    76,    76,   259,   259,   259,   319,   259,   320,
   259,   256,   256,   256,     1,   256,   323,   256,   324,   325,
   259,   259,   259,   259,   259,   151,   328,   256,   256,   256,
   256,   256,    81,    81,    81,   158,    81,   159,    81,   252,
   252,   252,   140,   252,   139,   252,   138,   167,    81,    81,
    81,    81,    81,   135,   nil,   252,   252,   252,   252,   252,
   124,   124,   124,   nil,   124,   nil,   124,   123,   123,   nil,
   nil,   123,   nil,   123,   nil,   nil,   124,   124,   124,   124,
   124,   nil,   nil,   123,   123,   123,   123,   123,   322,   322,
   322,   nil,   322,   nil,   322,   226,   226,   nil,   nil,   226,
   nil,   226,   nil,   nil,   322,   322,   322,   322,   322,   nil,
   nil,   226,   226,   226,   226,   226,   227,   227,   227,   nil,
   227,   nil,   227,   110,   110,   110,   nil,   110,   nil,   110,
   nil,   nil,   227,   227,   227,   227,   227,   nil,   nil,   110,
   110,   110,   110,   110,   109,   109,   109,   nil,   109,   nil,
   109,    12,    12,    12,   nil,    12,   nil,    12,   nil,   nil,
   109,   109,   109,   109,   109,   nil,   nil,    12,    12,    12,
    12,    12,    13,    13,    13,   nil,    13,   nil,    13,   153,
   153,   nil,   nil,   153,   nil,   153,   nil,   nil,    13,    13,
    13,    13,    13,   nil,   nil,   153,   153,   153,   153,   153,
   152,   152,   152,   nil,   152,   nil,   152,   157,   157,   157,
   nil,   157,   nil,   157,   nil,   nil,   152,   152,   152,   152,
   152,   nil,   nil,   157,   157,   157,   157,   157,   150,   150,
   150,   nil,   150,   nil,   150,   276,   276,   276,   nil,   276,
   nil,   276,   nil,   nil,   150,   150,   150,   150,   150,   nil,
   nil,   276,   276,   276,   276,   276,   275,   275,   275,   nil,
   275,   nil,   275,    39,    39,    39,   nil,    39,   nil,    39,
   nil,   nil,   275,   275,   275,   275,   275,   nil,   nil,    39,
    39,    39,    39,    39,   155,   155,   155,   nil,   155,   nil,
   155,   228,   228,   228,   nil,   228,   nil,   228,   nil,   nil,
   155,   155,   155,   155,   155,   nil,   nil,   228,   228,   228,
   228,   228,   117,   117,   nil,   nil,   117,   nil,   117,    94,
    94,    94,   nil,    94,   nil,    94,   nil,   nil,   117,   117,
   117,   117,   117,   nil,   nil,    94,    94,    94,    94,    94,
   240,   240,   240,   nil,   240,   nil,   240,   156,   156,   156,
   nil,   156,   nil,   156,   nil,   nil,   240,   240,   240,   240,
   240,   223,   nil,   156,   156,   156,   156,   156,   177,   177,
   177,   223,   177,   223,   177,   223,   131,   223,   nil,    60,
   nil,   nil,   nil,   nil,   177,   nil,   131,   266,   131,    60,
   131,    60,   131,    60,   274,    60,   200,   266,   200,   266,
   200,   266,   200,   266,   274,   nil,   274,   nil,   274,   nil,
   274,   282,   282,   282,   nil,   282,   nil,   282,   287,   287,
   287,   nil,   287,   nil,   287,   nil,   nil,   282,   nil,   308,
   308,   308,   nil,   308,   287,   308,   309,   309,   309,    57,
   309,   nil,   309,   nil,   246,   308,   246,   nil,   246,    57,
   246,    57,   309,    57,   199,   nil,   199,   nil,   199,   nil,
   199,   251,   251,   251,   nil,   251,   nil,   251,   107,   107,
   107,    61,   107,    61,   107,    61,   168,    61,   168,   267,
   168,   267,   168,   267,   nil,   267 ]

racc_action_pointer = [
    33,   424,   nil,   nil,   nil,     0,   nil,   nil,   nil,     2,
    27,   nil,   545,   566,   nil,   380,   nil,   nil,   396,   345,
   345,   328,   nil,   nil,   nil,   319,   339,   335,   nil,   228,
   nil,   nil,   nil,   nil,   nil,   nil,   150,   124,   nil,   657,
    47,    65,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   316,   101,   nil,   843,   nil,   160,
   783,   865,   298,   293,   nil,   314,   nil,   nil,     2,   321,
   nil,   299,   130,    98,   349,   370,   377,   292,    32,    -5,
   278,   426,   254,   249,   237,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   173,   225,   713,    63,   206,    69,   229,   134,
   153,   127,   nil,   nil,   110,   182,   nil,   862,   nil,   538,
   517,   nil,   nil,   176,   175,   143,   106,   706,   268,    68,
   nil,    92,    74,   461,   454,   nil,   nil,   -15,   nil,    15,
   145,   780,    54,    -5,     4,   458,   265,   nil,   450,   440,
   446,    42,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   622,   431,   594,   573,   156,   678,   741,   601,   431,   433,
   nil,   182,   205,   nil,   nil,   258,   183,   445,   870,    -8,
    71,    13,     2,   nil,   nil,   238,   174,   762,    33,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    38,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    52,   848,
   790,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    72,   nil,    97,   nil,    75,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   765,   163,   119,   489,   510,   685,   nil,
   199,   nil,   206,   nil,   192,   208,   204,   nil,   nil,   nil,
   734,   nil,   231,   nil,   234,   213,   838,   nil,   255,   nil,
   253,   855,   433,   nil,   nil,   nil,   405,   280,   nil,   398,
   nil,   342,   293,   286,   nil,   296,   791,   873,   287,   293,
   nil,   310,   nil,   327,   798,   650,   629,   237,   nil,   314,
   315,   nil,   805,   337,   nil,   346,   348,   812,   nil,   nil,
   nil,   nil,   352,   366,   nil,   361,   367,   368,   382,   nil,
   nil,   383,   nil,   nil,   379,   384,   nil,   380,   823,   830,
   nil,   nil,   392,   nil,   nil,   nil,   378,   nil,   nil,   387,
   401,   nil,   482,   408,   416,   417,   nil,   nil,   418,   nil,
   nil,   nil ]

racc_action_default = [
  -180,  -180,    -1,    -2,    -3,    -4,    -5,    -6,    -7,    -8,
    -9,   -10,  -180,  -180,   -34,   -35,   -36,   -37,   -38,   -39,
  -180,   -41,   -42,   -43,   -44,  -180,   -53,   -55,   -56,  -180,
   -68,   -71,   -72,   -73,   -74,   -75,  -180,  -180,  -111,  -180,
  -113,  -114,  -115,  -132,  -133,  -134,  -135,  -136,  -137,  -138,
  -139,  -140,  -141,  -142,  -180,  -180,   -80,  -180,  -116,  -180,
  -180,  -180,    -8,    -9,   -11,  -180,   -41,   -50,  -180,  -180,
   -76,  -180,  -180,  -180,   -59,  -180,  -174,  -180,    -8,    -9,
   -10,  -180,  -180,   -85,   -90,   -91,   -92,   -94,   -95,   -96,
   -97,   -98,  -180,  -180,  -180,  -180,  -180,  -180,  -180,  -180,
  -180,  -180,   332,   -12,   -13,  -180,   -16,  -180,   -31,  -180,
  -180,  -156,   -27,   -29,  -180,  -130,  -180,  -180,  -180,  -180,
   -28,   -30,  -180,  -180,  -180,  -157,  -164,  -180,  -166,  -180,
  -180,  -180,  -180,  -180,  -180,  -180,   -77,  -178,  -180,  -180,
  -180,    -8,   -51,   -52,   -53,   -54,   -55,   -57,   -58,   -62,
   -60,  -180,  -175,  -180,  -180,  -102,  -101,  -100,    -8,    -9,
   -83,  -180,  -180,   -99,   -84,  -180,  -180,  -180,  -180,  -130,
  -180,  -130,  -180,   -14,   -18,  -180,  -180,  -180,  -180,  -151,
  -152,  -153,  -154,  -149,  -155,  -150,  -118,   -47,   -63,  -131,
   -64,   -65,   -66,   -67,  -143,  -144,  -145,  -146,  -180,  -180,
  -180,  -124,   -48,  -158,  -159,  -160,  -161,  -162,  -163,  -165,
  -167,  -180,   -29,  -180,   -30,  -180,   -26,   -45,   -81,   -46,
   -82,  -179,   -40,  -180,  -180,  -180,  -180,  -176,   -78,  -105,
  -180,  -104,  -180,  -103,  -180,  -180,   -87,   -88,   -89,   -93,
  -180,  -112,  -180,  -117,  -180,  -180,  -180,  -121,  -180,   -19,
  -180,  -180,  -180,  -147,   -20,   -21,  -180,  -180,   -32,  -180,
  -168,  -180,  -180,  -180,  -173,  -180,  -180,  -119,  -180,  -180,
  -125,   -47,  -106,  -180,  -180,   -79,  -177,  -180,  -120,  -180,
  -180,  -122,  -180,  -180,  -148,  -180,  -180,  -180,  -172,  -169,
  -170,  -171,  -180,  -180,  -110,  -130,  -180,  -180,  -180,  -109,
  -107,  -180,   -61,   -86,  -180,  -180,   -23,  -180,  -180,  -180,
   -15,   -33,  -180,   -49,  -123,  -126,  -180,  -108,  -128,  -180,
  -180,   -25,  -180,  -180,  -180,  -180,   -24,   -22,  -180,  -127,
  -129,   -17 ]

racc_goto_table = [
    76,    80,    80,   188,   239,    13,    64,   136,   121,   129,
     5,   119,   257,   260,   237,   238,    26,     9,    68,    10,
    15,    77,    21,    25,   139,    74,   321,   321,    27,    62,
   311,    63,    67,   253,   253,    82,    93,   249,   255,     3,
   137,    16,    17,    18,    94,    19,    76,    96,   171,   172,
   169,   170,   111,   142,     1,     2,    95,   243,    97,   247,
   104,   103,   115,   173,    30,    31,    32,   151,    33,    34,
   132,   150,    35,   133,     6,    64,   105,   254,   236,   149,
   183,   152,   212,   143,     4,   310,    94,   106,   194,   144,
   141,   228,    10,   145,   183,    21,   147,    94,   158,   165,
   159,   146,   163,   108,    14,   nil,   nil,   nil,   nil,   158,
   nil,   159,   nil,   nil,   nil,   185,   242,   306,   260,   239,
   nil,   nil,   233,   260,   137,   nil,    80,    80,   nil,   nil,
   303,   nil,   nil,   nil,   nil,   nil,   nil,   215,   216,   nil,
   nil,   221,   nil,   nil,   260,   260,   nil,   268,   269,   nil,
   nil,   nil,   nil,   nil,   nil,   149,   nil,   227,   nil,   nil,
    94,    94,    94,   nil,   275,   nil,   nil,   nil,   nil,   nil,
   240,   272,   229,   230,   230,   231,   232,   nil,   nil,   nil,
   nil,   nil,   nil,   314,   nil,   nil,   212,   nil,   nil,   nil,
   nil,   nil,   nil,   279,   280,   nil,   nil,   137,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   294,   295,   nil,   nil,   nil,   nil,
   216,   nil,   300,   194,   nil,   nil,   nil,   194,   nil,   nil,
   183,   nil,   276,   221,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    80,   nil,   nil,   216,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   289,   290,   291,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   221,   302,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   183 ]

racc_goto_check = [
    45,    11,    11,    47,    60,    23,     7,    54,    26,    26,
     5,    24,    16,    68,    59,    59,    42,     9,    23,    10,
    31,    55,    36,    40,    24,    44,    22,    22,    43,     9,
    29,    10,    31,    25,    25,    56,    56,    19,    19,     3,
    45,    32,    33,    34,    23,    35,    45,    63,    26,    26,
    24,    24,    67,    41,     1,     2,     9,    47,    10,    47,
    13,    12,    46,    14,    48,    49,    50,    55,    51,    52,
    23,    44,    53,    23,     6,     7,    15,    20,    58,    23,
    45,    23,    24,     5,     4,    17,    23,    18,    45,    42,
     9,    54,    10,    31,    45,    36,    40,    23,     9,    23,
    10,    43,     5,    28,    30,   nil,   nil,   nil,   nil,     9,
   nil,    10,   nil,   nil,   nil,    23,    26,    16,    68,    60,
   nil,   nil,    11,    68,    45,   nil,    11,    11,   nil,   nil,
    59,   nil,   nil,   nil,   nil,   nil,   nil,    23,    23,   nil,
   nil,    23,   nil,   nil,    68,    68,   nil,    26,    26,   nil,
   nil,   nil,   nil,   nil,   nil,    23,   nil,    23,   nil,   nil,
    23,    23,    23,   nil,    54,   nil,   nil,   nil,   nil,   nil,
    23,    26,     9,     9,     9,    10,    10,   nil,   nil,   nil,
   nil,   nil,   nil,    47,   nil,   nil,    24,   nil,   nil,   nil,
   nil,   nil,   nil,    26,    26,   nil,   nil,    45,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,    26,   nil,   nil,   nil,   nil,
    23,   nil,    26,    45,   nil,   nil,   nil,    45,   nil,   nil,
    45,   nil,    23,    23,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    11,   nil,   nil,    23,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    23,    23,    23,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    23,    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    45 ]

racc_goto_pointer = [
   nil,    54,    55,    39,    84,    10,    74,    -6,   nil,    17,
    19,   -35,     6,     5,   -41,    21,  -165,  -202,    32,  -138,
   -99,   nil,  -282,     5,   -48,  -142,   -52,   nil,    48,  -257,
   104,    20,    41,    42,    43,    45,    22,   nil,   nil,   nil,
    23,   -20,    16,    28,    -4,   -29,     5,  -112,    64,    65,
    66,    68,    69,    72,   -62,    -8,    -1,   nil,   -83,  -147,
  -158,   nil,   nil,     8,   nil,   nil,   nil,    -3,  -164,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,    89,   nil,     7,     8,    78,
    79,    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   250,   264,    65,   113,   112,   214,   120,   nil,   258,
   nil,    91,   nil,   nil,   nil,   nil,    66,    22,    23,    24,
   nil,   nil,    90,   nil,   nil,    44,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    83,    84,    85,
    86,    87,    88,    38,    40,    41,    42,   125,   126,   128 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 44, :_reduce_8,
  1, 44, :_reduce_9,
  1, 44, :_reduce_10,
  2, 45, :_reduce_11,
  3, 43, :_reduce_12,
  1, 49, :_reduce_none,
  2, 49, :_reduce_14,
  5, 50, :_reduce_15,
  1, 50, :_reduce_none,
  8, 55, :_reduce_17,
  1, 51, :_reduce_18,
  2, 51, :_reduce_19,
  2, 51, :_reduce_20,
  1, 57, :_reduce_none,
  5, 57, :_reduce_22,
  3, 56, :_reduce_23,
  5, 56, :_reduce_24,
  4, 56, :_reduce_25,
  4, 46, :_reduce_26,
  1, 61, :_reduce_none,
  1, 63, :_reduce_none,
  3, 47, :_reduce_29,
  3, 48, :_reduce_30,
  1, 52, :_reduce_none,
  1, 53, :_reduce_none,
  1, 54, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  4, 67, :_reduce_40,
  1, 68, :_reduce_41,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  4, 73, :_reduce_45,
  4, 73, :_reduce_46,
  4, 74, :_reduce_47,
  4, 75, :_reduce_48,
  7, 76, :_reduce_49,
  2, 69, :_reduce_50,
  3, 70, :_reduce_51,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 78, :_reduce_none,
  1, 78, :_reduce_none,
  2, 71, :_reduce_59,
  3, 71, :_reduce_60,
  5, 81, :_reduce_61,
  2, 81, :_reduce_62,
  4, 72, :_reduce_63,
  2, 83, :_reduce_64,
  2, 83, :_reduce_65,
  2, 83, :_reduce_66,
  2, 83, :_reduce_67,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  2, 85, :_reduce_76,
  3, 90, :_reduce_77,
  4, 90, :_reduce_78,
  5, 90, :_reduce_79,
  2, 89, :_reduce_80,
  4, 88, :_reduce_81,
  4, 88, :_reduce_82,
  3, 86, :_reduce_83,
  3, 87, :_reduce_84,
  1, 93, :_reduce_85,
  5, 93, :_reduce_86,
  3, 93, :_reduce_87,
  3, 93, :_reduce_88,
  3, 93, :_reduce_89,
  1, 93, :_reduce_90,
  1, 93, :_reduce_91,
  1, 95, :_reduce_92,
  3, 95, :_reduce_93,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  2, 94, :_reduce_99,
  2, 96, :_reduce_100,
  2, 96, :_reduce_101,
  2, 96, :_reduce_102,
  3, 99, :_reduce_103,
  3, 99, :_reduce_104,
  3, 99, :_reduce_105,
  5, 80, :_reduce_106,
  6, 80, :_reduce_107,
  7, 80, :_reduce_108,
  6, 80, :_reduce_109,
  6, 80, :_reduce_110,
  1, 79, :_reduce_none,
  4, 79, :_reduce_112,
  1, 100, :_reduce_113,
  1, 100, :_reduce_114,
  1, 100, :_reduce_115,
  2, 101, :_reduce_116,
  4, 102, :_reduce_117,
  4, 102, :_reduce_118,
  5, 102, :_reduce_119,
  5, 102, :_reduce_120,
  4, 103, :_reduce_121,
  5, 103, :_reduce_122,
  7, 103, :_reduce_123,
  4, 103, :_reduce_124,
  5, 103, :_reduce_125,
  7, 103, :_reduce_126,
  9, 103, :_reduce_127,
  7, 103, :_reduce_128,
  9, 103, :_reduce_129,
  0, 84, :_reduce_130,
  1, 84, :_reduce_none,
  1, 60, :_reduce_132,
  1, 60, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  2, 62, :_reduce_143,
  2, 62, :_reduce_144,
  2, 62, :_reduce_145,
  2, 62, :_reduce_146,
  1, 58, :_reduce_none,
  2, 58, :_reduce_148,
  2, 104, :_reduce_149,
  2, 104, :_reduce_150,
  2, 104, :_reduce_151,
  2, 104, :_reduce_152,
  2, 104, :_reduce_153,
  2, 104, :_reduce_154,
  2, 65, :_reduce_none,
  1, 65, :_reduce_none,
  1, 105, :_reduce_none,
  2, 105, :_reduce_158,
  2, 105, :_reduce_159,
  2, 105, :_reduce_160,
  2, 105, :_reduce_161,
  2, 105, :_reduce_162,
  2, 105, :_reduce_163,
  1, 106, :_reduce_none,
  2, 106, :_reduce_165,
  1, 64, :_reduce_none,
  2, 64, :_reduce_167,
  1, 59, :_reduce_none,
  2, 59, :_reduce_169,
  2, 59, :_reduce_170,
  2, 59, :_reduce_171,
  2, 66, :_reduce_none,
  1, 66, :_reduce_none,
  1, 92, :_reduce_174,
  2, 92, :_reduce_175,
  3, 92, :_reduce_176,
  4, 92, :_reduce_177,
  1, 91, :_reduce_178,
  2, 91, :_reduce_179 ]

racc_reduce_n = 180

racc_shift_n = 332

racc_token_table = {
  false => 0,
  :error => 1,
  :T => 2,
  :Z => 3,
  :E => 4,
  :X => 5,
  :U => 6,
  :UNKNOWN => 7,
  :OPEN => 8,
  :LONGYEAR => 9,
  :UNMATCHED => 10,
  :DOTS => 11,
  :UA => 12,
  :PUA => 13,
  "-" => 14,
  ":" => 15,
  "2" => 16,
  "4" => 17,
  "0" => 18,
  "+" => 19,
  "1" => 20,
  "/" => 21,
  "3" => 22,
  "^" => 23,
  "[" => 24,
  "]" => 25,
  "{" => 26,
  "}" => 27,
  "," => 28,
  "(" => 29,
  ")" => 30,
  "-(" => 31,
  "5" => 32,
  "6" => 33,
  "7" => 34,
  "8" => 35,
  "9" => 36 }

racc_nt_base = 37

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "T",
  "Z",
  "E",
  "X",
  "U",
  "UNKNOWN",
  "OPEN",
  "LONGYEAR",
  "UNMATCHED",
  "DOTS",
  "UA",
  "PUA",
  "\"-\"",
  "\":\"",
  "\"2\"",
  "\"4\"",
  "\"0\"",
  "\"+\"",
  "\"1\"",
  "\"/\"",
  "\"3\"",
  "\"^\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\"-(\"",
  "\"5\"",
  "\"6\"",
  "\"7\"",
  "\"8\"",
  "\"9\"",
  "$start",
  "edtf",
  "level_0_expression",
  "level_1_expression",
  "level_2_expression",
  "date",
  "date_time",
  "positive_date",
  "negative_date",
  "year",
  "year_month",
  "year_month_day",
  "time",
  "base_time",
  "zone_offset",
  "hour",
  "minute",
  "second",
  "midnight",
  "zone_offset_hour",
  "positive_zone_offset",
  "d01_13",
  "d01_59",
  "digit",
  "month",
  "d01_12",
  "day",
  "d01_31",
  "d00_23",
  "d00_59",
  "unknown",
  "unspecified",
  "negative_unspecified",
  "level_1_interval",
  "long_year_simple",
  "season",
  "unspecified_year",
  "unspecified_month",
  "unspecified_day",
  "unspecified_day_and_month",
  "level_1_start",
  "level_1_end",
  "partial_uncertain_or_approximate",
  "partial_unspecified",
  "long_year",
  "positive_digit",
  "season_number",
  "ua",
  "season_qualified",
  "choice_list",
  "inclusive_list",
  "masked_precision",
  "date_and_calendar",
  "long_year_scientific",
  "integer",
  "int1_4",
  "list",
  "earlier",
  "list_elements",
  "later",
  "list_element",
  "atomic",
  "consecutives",
  "pua_base",
  "pua_year",
  "pua_year_month",
  "pua_year_month_day",
  "d01_23",
  "d01_29",
  "d01_30" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_8(val, _values, result)
     result = Date.new(val[0]).year_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_9(val, _values, result)
     result = Date.new(*val.flatten).month_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_10(val, _values, result)
     result = Date.new(*val.flatten).day_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_11(val, _values, result)
     result = -val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_12(val, _values, result)
        result = DateTime.new(val[0].year, val[0].month, val[0].day, *val[2])
    result.skip_timezone = (val[2].length == 3)
  
    result
  end
.,.,

# reduce 13 omitted

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_14(val, _values, result)
     result = val.flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_15(val, _values, result)
     result = val.values_at(0, 2, 4) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.y', 46)
  def _reduce_17(val, _values, result)
     result = [24, 0, 0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 48)
  def _reduce_18(val, _values, result)
     result = 0 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_19(val, _values, result)
     result = -1 * val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 50)
  def _reduce_20(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_22(val, _values, result)
     result = 0 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_23(val, _values, result)
     result = Rational(val[0] * 60 + val[2], 1440) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_24(val, _values, result)
     result = Rational(840, 1440) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_25(val, _values, result)
     result = Rational(val[3], 1440) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 64)
  def _reduce_26(val, _values, result)
        result = val.zip([1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }
  
    result
  end
.,.,

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_29(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 77)
  def _reduce_30(val, _values, result)
        result = val[0] << val[2]
    if result[2] > 31 || (result[2] > 30 && [2,4,6,9,11].include?(result[1])) || (result[2] > 29 && result[1] == 2)
      raise ArgumentError, "invalid date (invalid days #{result[2]} for month #{result[1]})"
    end
  
    result
  end
.,.,

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

module_eval(<<'.,.,', 'parser.y', 96)
  def _reduce_40(val, _values, result)
     result = EDTF::Unknown.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 102)
  def _reduce_41(val, _values, result)
                    result = Date.new(val[0][0]).year_precision!
                result.unspecified.year[2,2] = val[0][1]
              
    result
  end
.,.,

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

module_eval(<<'.,.,', 'parser.y', 113)
  def _reduce_45(val, _values, result)
          result = [val[0,3].zip([1000,100,10]).reduce(0) { |s,(a,b)| s += a * b }, [false,true]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 117)
  def _reduce_46(val, _values, result)
          result = [val[0,2].zip([1000,100]).reduce(0) { |s,(a,b)| s += a * b }, [true, true]]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 121)
  def _reduce_47(val, _values, result)
        result = Date.new(val[0]).unspecified!(:month)
    result.precision = :month
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 126)
  def _reduce_48(val, _values, result)
        result = Date.new(*val[0]).unspecified!(:day)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 130)
  def _reduce_49(val, _values, result)
        result = Date.new(val[0]).unspecified!([:day,:month])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 133)
  def _reduce_50(val, _values, result)
     result = -val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 137)
  def _reduce_51(val, _values, result)
        result = Interval.new(val[0], val[2])
  
    result
  end
.,.,

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.y', 148)
  def _reduce_59(val, _values, result)
          result = Date.new(val[1])
      result.precision = :year
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 153)
  def _reduce_60(val, _values, result)
          result = Date.new(-1 * val[2])
      result.precision = :year
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 160)
  def _reduce_61(val, _values, result)
          result = val.zip([10000,1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_62(val, _values, result)
     result = 10 * val[0] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 167)
  def _reduce_63(val, _values, result)
        result = Season.new(val[0], val[2])
    val[3].each { |ua| result.send(ua) }
  
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 171)
  def _reduce_64(val, _values, result)
     result = 21 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 172)
  def _reduce_65(val, _values, result)
     result = 22 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 173)
  def _reduce_66(val, _values, result)
     result = 23 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 174)
  def _reduce_67(val, _values, result)
     result = 24 
    result
  end
.,.,

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

module_eval(<<'.,.,', 'parser.y', 192)
  def _reduce_76(val, _values, result)
     result = val[0]; result.qualifier = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 198)
  def _reduce_77(val, _values, result)
          result = Date.new(val[0].year * 10 ** val[2]).year_precision!
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 202)
  def _reduce_78(val, _values, result)
          result = Date.new(val[1] * 10 ** val[3]).year_precision!
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 206)
  def _reduce_79(val, _values, result)
          result = Date.new(-1 * val[2] * 10 ** val[4]).year_precision!
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 211)
  def _reduce_80(val, _values, result)
     result = val[0]; result.calendar = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 217)
  def _reduce_81(val, _values, result)
          d = val[0,3].zip([1000,100,10]).reduce(0) { |s,(a,b)| s += a * b }
      result = EDTF::Decade.new(d)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 222)
  def _reduce_82(val, _values, result)
          d = val[0,2].zip([1000,100]).reduce(0) { |s,(a,b)| s += a * b }
      result = EDTF::Century.new(d)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 228)
  def _reduce_83(val, _values, result)
     result = val[1].choice! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 230)
  def _reduce_84(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 232)
  def _reduce_85(val, _values, result)
     result = EDTF::Set.new(val[0]).earlier! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 233)
  def _reduce_86(val, _values, result)
     result = EDTF::Set.new([val[0]] + val[2] + [val[4]]).earlier!.later! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 234)
  def _reduce_87(val, _values, result)
     result = EDTF::Set.new([val[0]] + val[2]).earlier! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 235)
  def _reduce_88(val, _values, result)
     result = EDTF::Set.new([val[0]] + [val[2]]).earlier!.later! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 236)
  def _reduce_89(val, _values, result)
     result = EDTF::Set.new(val[0] + [val[2]]).later! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 237)
  def _reduce_90(val, _values, result)
     result = EDTF::Set.new(*val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 238)
  def _reduce_91(val, _values, result)
     result = EDTF::Set.new(val[0]).later! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 241)
  def _reduce_92(val, _values, result)
     result = [val[0]].flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 242)
  def _reduce_93(val, _values, result)
     result = val[0] + [val[2]].flatten 
    result
  end
.,.,

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

module_eval(<<'.,.,', 'parser.y', 254)
  def _reduce_99(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 256)
  def _reduce_100(val, _values, result)
     result = Date.new(*val[0]).year_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 257)
  def _reduce_101(val, _values, result)
     result = Date.new(*val[0]).month_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 258)
  def _reduce_102(val, _values, result)
     result = Date.new(val[0]).year_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 261)
  def _reduce_103(val, _values, result)
     result = (Date.new(val[0]).day_precision! .. Date.new(val[2]).day_precision!) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 262)
  def _reduce_104(val, _values, result)
     result = (Date.new(val[0]).month_precision! .. Date.new(val[2]).month_precision!) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 263)
  def _reduce_105(val, _values, result)
     result = (Date.new(val[0]).year_precision! .. Date.new(val[2]).year_precision!) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 269)
  def _reduce_106(val, _values, result)
          result = Date.new(val[0][0], val[2], val[4])
      result.unspecified.year[2,2] = val[0][1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 274)
  def _reduce_107(val, _values, result)
          result = Date.new(val[0][0], 1, val[5])
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!(:month)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 280)
  def _reduce_108(val, _values, result)
          result = Date.new(val[0][0], 1, 1)
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!([:month, :day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 286)
  def _reduce_109(val, _values, result)
          result = Date.new(val[0][0], val[2], 1)
      result.unspecified.year[2,2] = val[0][1]
      result.unspecified!(:day)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 292)
  def _reduce_110(val, _values, result)
          result = Date.new(val[0], 1, val[5])
      result.unspecified!(:month)
    
    result
  end
.,.,

# reduce 111 omitted

module_eval(<<'.,.,', 'parser.y', 299)
  def _reduce_112(val, _values, result)
     result = uoa(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 302)
  def _reduce_113(val, _values, result)
     result = val[0].year_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 303)
  def _reduce_114(val, _values, result)
     result = val[0][0].month_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 304)
  def _reduce_115(val, _values, result)
     result = val[0].day_precision! 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 306)
  def _reduce_116(val, _values, result)
     result = uoa(Date.new(val[0]), val[1], :year) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 310)
  def _reduce_117(val, _values, result)
          result = [uoa(val[0].change(:month => val[2]), val[3], [:month, :year])]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 313)
  def _reduce_118(val, _values, result)
            result = [uoa(Date.new(val[0], val[2]), val[3], [:year, :month])]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 316)
  def _reduce_119(val, _values, result)
            result = [uoa(Date.new(val[0], val[2]), val[4], [:month]), true]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 319)
  def _reduce_120(val, _values, result)
            result = [uoa(val[0].change(:month => val[2]), val[4], [:month]), true]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 325)
  def _reduce_121(val, _values, result)
          result = uoa(val[0][0].change(:day => val[2]), val[3], val[0][1] ? [:day] : nil)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 328)
  def _reduce_122(val, _values, result)
            result = uoa(val[0][0].change(:day => val[2]), val[4], [:day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 331)
  def _reduce_123(val, _values, result)
            result = uoa(uoa(Date.new(val[0], val[2], val[5]), val[4], :month), val[6], :day)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 334)
  def _reduce_124(val, _values, result)
            result = uoa(Date.new(val[0][0], val[0][1], val[2]), val[3])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 337)
  def _reduce_125(val, _values, result)
            result = uoa(Date.new(val[0][0], val[0][1], val[2]), val[4], [:day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 340)
  def _reduce_126(val, _values, result)
            result = uoa(Date.new(val[0], val[2], val[4]), val[6], [:month, :day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 343)
  def _reduce_127(val, _values, result)
            result = Date.new(val[0], val[2], val[4])
        result = uoa(result, val[6], [:day])
        result = uoa(result, val[8], [:month, :day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 348)
  def _reduce_128(val, _values, result)
            result = val[0].change(:month => val[2], :day => val[4])
        result = uoa(result, val[6], [:month, :day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 352)
  def _reduce_129(val, _values, result)
            result = val[0].change(:month => val[2], :day => val[4])
        result = uoa(result, val[6], [:day])
        result = uoa(result, val[8], [:month, :day])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 363)
  def _reduce_130(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 131 omitted

module_eval(<<'.,.,', 'parser.y', 367)
  def _reduce_132(val, _values, result)
     result = 0 
    result
  end
.,.,

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'parser.y', 373)
  def _reduce_143(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 374)
  def _reduce_144(val, _values, result)
     result = 10 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 375)
  def _reduce_145(val, _values, result)
     result = 11 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 376)
  def _reduce_146(val, _values, result)
     result = 12 
    result
  end
.,.,

# reduce 147 omitted

module_eval(<<'.,.,', 'parser.y', 380)
  def _reduce_148(val, _values, result)
     result = 13 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 383)
  def _reduce_149(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 384)
  def _reduce_150(val, _values, result)
     result = 10 + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 385)
  def _reduce_151(val, _values, result)
     result = 20 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 386)
  def _reduce_152(val, _values, result)
     result = 21 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 387)
  def _reduce_153(val, _values, result)
     result = 22 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 388)
  def _reduce_154(val, _values, result)
     result = 23 
    result
  end
.,.,

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

module_eval(<<'.,.,', 'parser.y', 396)
  def _reduce_158(val, _values, result)
     result = 24 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 397)
  def _reduce_159(val, _values, result)
     result = 25 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 398)
  def _reduce_160(val, _values, result)
     result = 26 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 399)
  def _reduce_161(val, _values, result)
     result = 27 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 400)
  def _reduce_162(val, _values, result)
     result = 28 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 401)
  def _reduce_163(val, _values, result)
     result = 29 
    result
  end
.,.,

# reduce 164 omitted

module_eval(<<'.,.,', 'parser.y', 405)
  def _reduce_165(val, _values, result)
     result = 30 
    result
  end
.,.,

# reduce 166 omitted

module_eval(<<'.,.,', 'parser.y', 409)
  def _reduce_167(val, _values, result)
     result = 31 
    result
  end
.,.,

# reduce 168 omitted

module_eval(<<'.,.,', 'parser.y', 413)
  def _reduce_169(val, _values, result)
     result = 30 + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 414)
  def _reduce_170(val, _values, result)
     result = 40 + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 415)
  def _reduce_171(val, _values, result)
     result = 50 + val[1] 
    result
  end
.,.,

# reduce 172 omitted

# reduce 173 omitted

module_eval(<<'.,.,', 'parser.y', 422)
  def _reduce_174(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 423)
  def _reduce_175(val, _values, result)
     result = 10 * val[0] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 426)
  def _reduce_176(val, _values, result)
               result = val.zip([100,10,1]).reduce(0) { |s,(a,b)| s += a * b }
         
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 430)
  def _reduce_177(val, _values, result)
               result = val.zip([1000,100,10,1]).reduce(0) { |s,(a,b)| s += a * b }
         
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 434)
  def _reduce_178(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 435)
  def _reduce_179(val, _values, result)
     result = 10 * val[0] + val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module EDTF
